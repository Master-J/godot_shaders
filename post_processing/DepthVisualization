//MIT License
//Copyright (c) 2020 Master-J
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

//Linear depth visualization post processing shader

//How to use :
//	(1) Create quad mesh, make it a child of a camera
//	(2) Set width and height to 2
//	(3) Add shader material and assign this shader
//	(4) Edit the z-near and z-far to fit your needs

shader_type spatial;

render_mode unshaded, depth_draw_never;

uniform float z_near = 0.01;
uniform float z_far = 100.0;

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

void fragment() {
	//Get depth value and linearize it between z_near and z_far
	float z = (2.0 * z_near) / (z_far + z_near - texture( DEPTH_TEXTURE, SCREEN_UV ).x * (z_far - z_near));
	ALBEDO = vec3(z);
}
